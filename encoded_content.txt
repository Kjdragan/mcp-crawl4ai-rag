# Agent Development Kit (ADK) Documentation

# Table of Contents

- Introduction: What is ADK?
- Get Started
- Installation
- Quickstart
- Quickstart (Streaming)
- Testing
- About ADK
- Tutorial: Building an Agent Team
- Step 1: Basic Weather Lookup Agent
- Step 2: Multi-Model Agents with LiteLLM
- Step 3: Agent Team Delegation (Greetings & Farewells)
- Step 4: Adding Memory with Session State
- Step 5: Safety Guardrail – before_model_callback
- Step 6: Safety Guardrail – before_tool_callback
- Conclusion: Agent Team Complete
- Agents
- LLM Agents
- Workflow Agents
- Sequential Agents
- Loop Agents
- Parallel Agents
- Custom Agents
- Multi-Agent Systems
- Models
- Tools
- Function Tools
- Built-in Tools
- Third-Party Tools
- Google Cloud Tools
- MCP Tools
- OpenAPI Tools
- Authentication
- Running Agents
- Runtime Configuration
- Deploying Agents
- Agent Engine (Vertex AI)
- Cloud Run
- Google Kubernetes Engine (GKE)
- Sessions & Memory
- Session
- State
---
# Memory

# Callbacks

# Overview of Callbacks

# Types of Callbacks

# Callback Patterns

# Artifacts

# Events

# Context

# Evaluate

# MCP

# Streaming

# Safety and Security

# Community Resources

# Contributing Guide

# API Reference

# Introduction: What is ADK?

Agent Development Kit (ADK) is a flexible and modular framework for developing and deploying AI agents. While optimized for Google’s Gemini models and the Google ecosystem, ADK is model-agnostic and deployment-agnostic, designed for compatibility with other frameworks. ADK makes agent development feel more like software development, simplifying the creation, orchestration, and deployment of agentic architectures that range from simple tasks to complex workflows1.

ADK provides tools to build (define agent logic and behaviors), evaluate (test agents systematically), and deploy agents seamlessly12. It supports both conversational agents (e.g. chatbots) and non-conversational agents, and can handle complex multi-step tasks and interactions. In ADK, you can define agents that use Large Language Models (LLMs) for reasoning (e.g. an LlmAgent for dynamic behavior), or create deterministic workflow agents (SequentialAgent, ParallelAgent, LoopAgent) for predictable pipelines3. You can even compose multiple specialized agents into hierarchies for multi-agent systems, enabling complex coordination and delegation4.

Key capabilities of ADK include: a rich ecosystem of Tools (pre-built tools like web search, code execution, etc., as well as integration with 3rd-party libraries)5, flexible orchestration of agent behaviors (mixing workflows and LLM-driven decisions)3, built-in evaluation mechanisms for agent performance6, and support for deploying agents anywhere (locally, via Vertex AI’s Agent Engine, Cloud Run, GKE, or custom infrastructure)7. Additionally, ADK emphasizes safety and security by providing patterns and best practices to build trustworthy agents8.

# Get Started

Agent Development Kit (ADK) is designed to empower developers to build, manage, evaluate, and deploy AI-powered agents. It provides a robust and flexible environment for creating both conversational and non-conversational agents, capable of handling complex tasks and workflows9. The following guides will help you get up and running with ADK.
---
# Installation

To start using ADK, first install the Python package. It’s recommended to use a Python virtual environment (using venv) before installation:

# Create a virtual environment
python -m venv .venv
# Activate the environment (Mac/Linux)
source .venv/bin/activate
# Windows CMD:
.venv\Scripts\activate.bat
# Windows PowerShell:
.venv\Scripts\Activate.ps1

Once the environment is active, install ADK via pip:

pip install google-adk

You can verify the installation if needed:

pip show google-adk

After installation, you’re ready to proceed to the quickstart to build your first agent.

# Quickstart

This quickstart will guide you through creating your first ADK agent with multiple tools and running it locally (either via a CLI or in a browser-based Developer UI). It assumes you have Python 3.9+ and an IDE or terminal access. The steps include setting up your environment, creating a project, defining an agent and tools, and running the agent.

1. Set up Environment & Install ADK: Ensure you have a Python 3.9+ environment. Create and activate a virtual environment, then install ADK with pip install google-adk. (If you haven’t already done these steps above.)
2. Create Agent Project: Organize your project files. For example, create a project directory (e.g. parent_folder/multi_tool_agent) with an __init__.py, an agent.py, and a .env file. The __init__.py can import your agent definition, and agent.py will contain the code for your agent. Use OS commands or an IDE to create these files.
---
# Project structure:

parent_folder/
multi_tool_agent/
__init__.py
agent.py
.env

# Initialize __init__.py :

In multi_tool_agent/__init__.py, import the agent module:

# multi_tool_agent/__init__.py
from . import agent

# Write agent.py :

In multi_tool_agent/agent.py, define your agent and any tools it needs. For this quickstart, we will create a simple agent that can answer questions about the weather and current time in a city, by using two tools (get_weather and get_current_time).

# First, define the tool functions in agent.py.

These are plain Python functions that provide capabilities beyond the agent’s built-in LLM reasoning:

# multi_tool_agent/agent.py
import datetime
from zoneinfo import ZoneInfo
from google.adk.agents import Agent

def get_weather(city: str) -> dict:
"""Retrieves the current weather report for a specified city.
Args:
city (str): The name of the city for which to retrieve the weather report.
Returns:
dict: status and result or error message.
"""
if city.lower() == "new york":
return {
"status": "success",
"report": (
"The weather in New York is sunny with a temperature of 25 degrees Celsius (77 degrees Fahrenheit)."
),
}
---
# Weather Time Agent

Returns the current time in a specified city.

# Function: get_current_time

Args:

- city (str): The name of the city for which to retrieve the current time.

Returns:

- dict: status and result or error message.

# Implementation

def get_current_time(city: str) -> dict:
if city.lower() == "new york":
tz_identifier = "America/New_York"
else:
return {
"status": "error",
"error_message": (
f"Sorry, I don't have timezone information for {city}."
),
}
tz = ZoneInfo(tz_identifier)
now = datetime.datetime.now(tz)
report = (
f"The current time in {city} is {now.strftime('%Y-%m-%d %H:%M:%S %Z%z')}"
)
return {"status": "success", "report": report}

# Agent Definition

root_agent = Agent(
name="weather_time_agent",
model="gemini-2.0-flash",  # specify the LLM to use (Gemini model in this case)
description="Agent to answer questions about the time and weather in a city.",
instruction=(
"You are a helpful agent who can answer user questions about the time
and weather in a city."
)
)
---
# 3. Set up the model credentials:

Your agent’s ability to call the LLM service (Gemini) requires authentication. Obtain an API key for Google’s Generative AI API (Gemini). Then, in the .env file inside multi_tool_agent/, set up credentials. For example:

GOOGLE_GENAI_USE_VERTEXAI=FALSE
GOOGLE_API_KEY=&lt;YOUR_ACTUAL_API_KEY_HERE&gt;

If you are using Google Cloud’s Vertex AI endpoint for Gemini instead, you would set:

GOOGLE_GENAI_USE_VERTEXAI=TRUE
GOOGLE_CLOUD_PROJECT
GOOGLE_CLOUD_LOCATION

# 4. Run Your Agent:

ADK provides multiple ways to run and interact with your agent:

- Developer UI (adk web): a local web app to chat with the agent and inspect its behavior.
- Terminal CLI (adk run): run a quick conversation in the console.
- API Server (adk api_server): run a local REST API to integrate your agent with other services.

For the quickstart, we’ll use the Developer UI. In your terminal, navigate to the parent directory (so that your agent package folder is present) and run:

adk web

This will start a local web server for the dev UI (by default at http://localhost:8000). Step 1: Open the provided URL in your browser. Step 2: In the UI, select your agent (e.g. "multi_tool_agent") from the dropdown. If you don’t see it listed, ensure you ran adk web from the correct parent directory (one level above multi_tool_agent).

Step 3: Now you can chat with your agent using the text input. For example, you could ask:

- "What’s the weather in New York?"
- "What time is it in New York?"

When you send a question, the agent will decide whether to use a tool. In our example, the agent should recognize a weather question and call the get_weather tool, or a time question and call get_current_time. You can observe the conversation and the internal steps.
---
# Tool Call

# get_weather (city-'new_york)

|8|Decides|Returns|@|
|---|---|---|---|
|User Query|Agent|Agent|User Receives|
|'What's the weather in nyc'|(weather_agent)|(Processes Result = Formulates Response)| |

Illustration: The flow of a user query through the agent and its tools. The user’s query (far left) is processed by the agent, which may decide to call a tool (e.g., get_weather or get_current_time). The tool executes (center), returns a result, and the agent uses that result to formulate a final answer (far right) to the user.

# Step 4:

In the dev UI, you can inspect the agent’s reasoning. The interface shows events such as the model’s thought, the tool being invoked, and the final response. For example, when the agent decides to use get_current_time, you may see events like functionCall: get_current_time followed by functionResponse and then the agent’s reply. The UI allows toggling views of Events, State, Artifacts, Sessions, and Eval for debugging.

# multi_tool_agent

Token Streaming +New Session

Events State Artifacts Sessions

Conversations with agent

model: OHellc! How can I help you today?

What time is it?

model: To provide you with the current time, I need to know which city you’re interested in. Could you please specify a city?

model functionCall: get_current_time

user functionResponse: get_current_time

model: The current time in New York is 2025-04-09 09:26.23 EDT-0400.

Type a Message.

# Developer UI (chat view):

This shows a sample conversation with the agent on the right, and a timeline of events on the left. You can see the agent’s message and tool call events in sequence.

# Step 5:

The dev UI also lets you inspect details of each step. By clicking on a tool call event, you can see its input and output in detail, including any changes to state or artifacts.
---
# Event 3 of 5

# Token Streaming 4 New Session

# Event

|Request|Response|
|---|---|
|gct_weather|Hello! How can I help you today?|
|weather_time_agent|What time is it?|
|gct_current_time|To provide you with the current time, I need to know which city you're interested in. Could you please specify?|
|content:|Now York|
|parts:| |
|functionCall|adk-561d8294-24df-4331-Odc4-b85e2a58a586|
|city:|"New York"|
|~narc:|"gct_current_time"|
|role:|"#model"|
|Invocation_id:|2f84f9c47 5bco ~Beed 54efdtducf9d|
|The current time in New York is:|2025-04-09 09:26:23 EDT-0400.|
|Jutnor:|"weather_time_agent"|
|actions:| |
|state_delta:| |
|artifact_delta:| |
|configs:| |
|long_running_tool_Ids:|"Aguoaspn"|
|imcstanp:|41744205101.108363|

# Type Message

Developer UI (tool inspection): Here we see the details of a tool call (get_current_time) including arguments and the context in which it was invoked. The agent’s chain of events can be traced and debugged.

Step 6 (Optional): You can also enable voice or video in the dev UI. If your model and environment support the Gemini Live API (for streaming multimedia), clicking the microphone or camera icons in the UI will allow you to speak to the agent or provide video input, and the agent can respond in audio or interpret the video respectively.

(This requires using a streaming-supported model and setting up SSL certificates for the local server.)

Once you’re done, you can stop the dev UI by pressing Ctrl+C in the terminal where adk web is running.

# Next steps:

This quickstart demonstrated a basic agent with tools. You can explore further by looking at the provided sample agents (see the ADK GitHub for more examples) or continue reading the documentation to learn about more advanced features of ADK.

# Quickstart (Streaming)

ADK also supports streaming agents, which enable low-latency, bidirectional communication with LLMs (e.g. voice and video streaming). The streaming quickstart walks through creating an agent that uses Gemini’s streaming (Live API) capabilities for real-time audio/video interactions.

In this quickstart, you’ll create a simple agent that uses the Google Search tool to answer questions, and then enable streaming input/output for voice and video.

Supported Models: Not all models support streaming. For ADK’s streaming features, you need to use Gemini models that support the Live API (for example, a Gemini model with “-live” in its name). Check the model documentation for Gemini’s Live API support.
---
# 1. Setup Environment & Install ADK

This is the same as before – create a virtual environment (if not already), and pip install google-adk 22.

# 2. Project Structure

For this example, create a project structure such as:

adk-streaming/
app/
.env               #  API key and config
google_search_agent/
__init__.py     #  (import agent)
agent.py        #  define agent
main.py (optional if needed to run outside adk web)

We’ll build a google_search_agent that can answer questions by searching Google (using a built-in google_search tool).

# Write agent.py

Define the agent using the google_search tool. For example:

from google.adk.agents import Agent
from google.adk.tools import google_search  # Import the built-in Google Search tool

root_agent = Agent(
name="basic_search_agent",
model="gemini-2.0-flash-exp",    # a Gemini model supporting streaming (experimental)
# e.g., model="gemini-2.0-flash-live-001",  # streaming-enabled model
description="Agent to answer questions using Google Search.",
instruction="You are an expert researcher. You always stick to the facts.",
tools=[google_search]
)

(The model ID can be updated to a specific streaming-enabled variant of Gemini. “flash-exp” is used as an example here, but gemini-2.0-flash-live-001 would be a streaming-capable model) 23.

Note: To use streaming features (text/voice), the chosen model must support methods like bidiGenerateContent (bidirectional streaming). Always verify model capabilities from the model documentation 24.

# 3. Set up the platform (API keys)

In the .env file in app/, set up the GOOGLE_API_KEY (and choose whether to use Vertex AI or not):

- For Google AI (direct):
---
# Testing

Before deploying your agent, it’s important to test it. ADK provides a simple way to test agents locally via an API server. You can launch a local FastAPI server that hosts your agent’s API and then send test requests using tools like curl or any HTTP client.

# Local Testing with adk api_server:

1. Launch the server: In your agent’s project directory (parent of the agent folder), run:

adk api_server
This starts a local server (by default on http://0.0.0.0:8000) serving your agent(s) as APIs.

You should see log output confirming the server is up.

# 4. Try the agent with adk web:

Just like before, run adk web in the adk-streaming/app directory. When the dev UI opens:

- Select google_search_agent in the dropdown.
- Try some text queries first (e.g., "What is the weather in New York?"). The agent will use the Google Search tool internally to fetch information and then respond.
- Try voice input: click the microphone icon, ask a question by speaking. The agent (if using a streaming-capable model and with proper SSL config) will respond with streamed audio output.
- Try video input: click the camera icon and ask a question like "What do you see?" when presenting an image or your camera. The agent will attempt to describe the video input in real-time.

# Stopping the agent:

Use Ctrl+C to stop the dev UI server when done. Keep in mind that streaming support might require additional setup (like SSL certificates via certifi as shown in the docs).

# Note on ADK Streaming:

ADK’s streaming is evolving. Some features (callbacks, long-running tools, ExampleTool, or using workflow agents like SequentialAgent in streaming mode) may be supported in future versions. The quickstart covers basic usage.

For a deeper dive, refer to the Custom Audio Streaming app tutorial (outlined in the docs) which explains how to build a custom async web app with ADK Streaming and FastAPI.
---
# 2. Create a session:

ADK APIs are structured by app, user, and session. To test, you need to create a session for your agent. You can do this with an HTTP POST. For example, using curl:

curl -X POST http://0.0.0.0:8000/apps/my_sample_agent/users/u_123/sessions/s_123 \
-H "Content-Type: application/json" \
-d '{"state": {"key1": "value1", "key2": 42}}'

This creates a session for app "my_sample_agent" (which should match your agent’s folder name or a defined app name), user "u_123", session "s_123", with an optional initial state payload. If successful, it returns JSON with the session info. (You cannot create the same session ID twice without deleting; you’ll get a "Session already exists" error.)

# 3. Send a query:

With a session established, you can send queries to the agent:

# 4. Synchronous mode (/run):

Posts a user message and waits for the full result.

# 5. Streaming mode (/run_sse):

Posts a user message and streams events (Server-Sent Events). For example, to use the standard /run:

curl -X POST http://0.0.0.0:8000/run \
-H "Content-Type: application/json" \
-d '{
"app_name": "my_sample_agent",
"user_id": "u_123",
"session_id": "s_123",
"new_message": {
"role": "user",
"parts": [{ "text": "Hey whats the weather in new york today" }]
}
}'

This sends a user query to app my_sample_agent, user u_123, session s_123. The agent will process the message and return a list of events as the response (when using /run, you get the entire event list after completion). An example abbreviated response list:

[
{"content":  {"parts": [{"functionCall": {"id": "...", "args": {"city":"new york"}, "name": "get_weather"}}], "role": "model"},  ...},
{"content":  {"parts": [{"functionResponse": {"id": "...", "name": "get_weather", "response": {"status":"success","report":"The weather in New York is sunny ..."}}}], "role": "user"}, ...},
{"content":  {"parts": [{"text": "OK. The weather in New York is sunny with a temperature of 25 degrees Celsius (41 degrees Fahrenheit).\n"}],  "role": "user"}}
]
---
In this sequence of events, you can see the model decided to call the get_weather tool (functionCall event), the tool responded (functionResponse event), and finally the model provided the answer 40 41.

If using the streaming endpoint /run_sse, the events will be sent incrementally as data: lines in an SSE stream 42 43. This is useful for interactive clients that want to display partial results (and also supports token-level streaming if streaming: true in the request) 44.

# 1. Observing results:

When testing, you can verify that:

1. The agent calls the expected tool (you’ll see the tool invocation in events).
2. The agent returns the final answer correctly.
3. Error cases (like asking for an unknown city’s weather) are handled as you coded (e.g., returns an error message from the tool, and the agent’s response to that).

If you want to see the agent’s thought process in detail, you can print all events as they occur by modifying your code (for instance, printing each event in an async loop as shown in the Quickstart’s call_agent_async comments) or simply inspect the returned events from the API.

# Integrations:

ADK’s callback system allows integration with third-party observability tools for logging and tracing. For example, Comet Opik is an open-source LLM observability platform that natively supports ADK, allowing you to log and analyze agent events and performance 45. Using such integrations can help debug and evaluate your agent’s behavior over time.

# Deploying your agent:

Once local testing is successful, you can move on to deployment. ADK provides multiple deployment options:

- Vertex AI’s Agent Engine – a managed service to deploy ADK agents on Google Cloud easily 46.
- Cloud Run – to containerize and run your agent with serverless scaling 46.
- Custom infrastructure – you could also run the agent on your own server or other platforms. (The docs provide guidance for GKE, etc.)

Each deployment option has its own considerations, which are detailed in the Deploy section of the docs.

# About ADK

# Agent Development Kit (ADK)

Build, Evaluate and Deploy agents, seamlessly! 47

ADK provides a cohesive set of components and abstractions to make agent development straightforward:

- Agents: Fundamental units that encapsulate behavior. An agent has a model (LLM or other reasoning engine) and may have one or more tools to perform actions beyond text (like API calls, code execution) 48. ADK includes specialized agent types (LLM-driven vs. workflow agents for deterministic flows).
---
# Discover; build and deploy agents

# Agent Development Kit

Client side SDK to define multi-agent applications for complex; real world scenarios

- Tools: Extend agent capabilities by connecting to external functionality (functions, APIs, other services). Tools allow agents to retrieve information or perform actions. In ADK, tools are simply Python callables (functions or methods) that agents can invoke.
- Callbacks: Hooks to observe or modify agent behavior at key points (before/after model calls, before/after tool calls, etc.). They allow custom code execution for logging, safety checks, etc., at runtime.
- Session Management: ADK manages conversation state via Session and State. A Session represents a conversation (with a unique session ID per user conversation), and the State is a dictionary where you can store context for that session (short-term memory).
- Memory: Beyond session-specific state, ADK supports persistent Memory across sessions (long-term memory per user) to enable personalization and context that persists between conversations.
- Artifacts: Mechanism for managing binary data or files (non-text data) associated with a session or user – e.g., images, PDFs generated or used by agents. Artifacts are versioned and stored via an Artifact Service (in-memory or cloud storage).
- Code Execution: Agents can execute code (e.g., through a code execution tool) to perform calculations or run dynamic logic based on LLM output (with safeguards).
- Planning: Support for advanced reasoning patterns where an agent plans a sequence of steps (possibly using something like ReAct or function calling strategies).
- Events: The atomic record of actions and messages in a session – each message from user or agent, each tool invocation, etc., is an Event that ADK tracks (used in the dev UI and for debugging).
- Runner: The orchestrator that runs an agent through one cycle of reasoning. It processes input (new user message), feeds it to the agent’s model, manages tool calls and callbacks, updates state, and produces output events.

# ADK Components Overview

The ADK encompasses many features (Agents, Tools, Orchestration, Callbacks, Streaming, Session Management, Evaluation, Deployment, Artifact Management, Memory, Code Execution, Planning, etc.) that work together. This diagram highlights the breadth of ADK’s capabilities in agent development.
---
# Core Concepts

ADK’s design revolves around making multi-agent systems easier. It encourages modular design:

- Use multiple small agents rather than one monolith (as shown in the tutorial).
- Each agent has clear responsibilities (enforced via its instructions and tools).
- Delegate tasks to sub-agents using AgentTool (an agent used as a tool) or through the ADK’s auto-delegation mechanism (based on sub_agents descriptions).
- Keep long-term info in memory services and per-session info in state, rather than hard-coding everything in prompts.

# Key Capabilities of ADK:

1. Multi-Agent System Design: Compose applications from multiple agents hierarchically. A root agent can route tasks to specialized sub-agents (as seen in the Agent Team tutorial). This yields modular and scalable solutions.
2. Rich Tool Ecosystem: Equip agents with diverse abilities. ADK allows integration of FunctionTool (custom Python functions), using other agents as tools (AgentTool), built-in tools (like code execution, web search), and third-party tool integrations (e.g. LangChain, CrewAI connectors). Long-running tools are supported for operations that take time (with intermediate progress events).
3. Flexible Orchestration: Mix deterministic workflows with LLM-driven decision making. You can define static sequences using SequentialAgent, parallel execution with ParallelAgent, loops with LoopAgent, and also allow LLM agents to dynamically decide actions. This combination provides both predictable control flow and adaptability.
4. Integrated Developer Tooling: ADK comes with a CLI and a web-based Developer UI to test and debug agents. You can inspect event logs, state changes, and agent decisions in real time. This greatly aids in development and troubleshooting of complex agents.
5. Native Streaming Support: ADK natively supports real-time streaming interactions (text, audio, even video) for agents that use models with streaming APIs. With minimal configuration changes, an agent can accept streaming input and produce streaming output (for example, speaking responses or describing live video).
6. Built-in Evaluation: ADK includes an evaluation framework to systematically assess agent performance. You can create multi-turn test cases and run evaluation runs to get metrics on how well agents adhere to expected behavior, both in final answers and intermediate reasoning steps.
7. Broad LLM Support: Although optimized for Google’s models, ADK’s pluggable model interface (BaseLlm) allows using other providers’ models. With LiteLLM integration, you can easily swap in OpenAI, Anthropic, or other models with minimal changes.
8. Artifact Management: Agents can handle files/binary outputs by saving them as Artifacts. This is useful for scenarios like generating a PDF report or an image – the artifact service manages storing these and retrieving them later.
9. Extensibility and Interoperability: ADK is designed to work in an open ecosystem. You can integrate external tools or frameworks. For instance, ADK can leverage LangChain or other libraries for additional capabilities.
10. State and Memory Management: Short-term memory (conversation state) and long-term memory are first-class citizens. ADK automatically handles session context, and provides hooks (SessionService, MemoryService) for customizing how state is stored (in-memory vs persistent).

Now that we’ve introduced ADK’s core concepts and benefits, let’s dive deeper into specific sections of the documentation for more details and examples.
---
# Tutorial: Building an Agent Team

This tutorial is a step-by-step guide to building a multi-agent system (an “Agent Team”) with ADK. We will start from a simple single agent and progressively enhance it with multiple agents, memory, and safety features. By the end, you’ll have a Weather Bot agent that can answer weather questions, greet the user, say farewells, remember user preferences, and enforce some safety rules, all using ADK’s features.

The tutorial is structured into 6 steps, each building on the previous:

- Step 1: Build your first agent (Weather Agent) with a tool for weather lookup.
- Step 2: Introduce LiteLLM to easily swap the underlying LLM (try the agent with different models).
- Step 3: Create an agent team by adding a Greeting agent and Farewell agent, and allow the Weather agent to delegate to them.
- Step 4: Add Session State to give the agent memory and personalization (e.g., user’s preferred units).
- Step 5: Implement an input guardrail using a before_model_callback to filter certain queries for safety.
- Step 6: Implement a tool argument guardrail using before_tool_callback to prevent certain tool actions (safety on tool usage).

Let’s walk through each step in detail:

# Step 1: Basic Weather Lookup Agent

Goal: Create a single agent (the Weather Agent) that can provide weather information for a city using a simple tool, and interact with a user.

We will define:

1. A Tool get_weather (Python function) that returns a weather report for a given city (using mocked data for now).
2. An Agent weather_agent that uses an LLM to interpret user queries and the get_weather tool to fetch weather data.

# Define the Tool (get_weather):

We create a Python function with a clear docstring, since ADK and the LLM use the docstring to understand what the tool does, its parameters and return format. For example:

def get_weather(city: str) -> dict:
"""Retrieves the current weather report for a specified city.
...
Returns a dict with 'status' and 'report' or 'error_message'.
"""
print(f"--- Tool: get_weather called for city: {city} ---")
# Normalize city name
city_normalized = city.lower().replace(" ", "")
# Mock weather data database:
mock_weather_db = {
"newyork": {"status": "success", "report": "The weather in New York is
---
sunny with a temperature of 25°C.

london: {"status": "success", "report": "It's cloudy in London with a temperature of 15°C."}

tokyo: {"status": "success", "report": "Tokyo is experiencing light rain and a temperature of 18°C."}

if city_normalized in mock_weather_db:

return mock_weather_db[city_normalized]

else:

return {"status": "error", "error_message": f"Sorry, I don't have weather information for '{city}'."}

Key point: The docstring explains what get_weather does, what argument it expects (city), and what it returns 65. This helps the LLM agent know when and how to use this tool. We include a print statement for logging when the tool is invoked.

We can optionally test this tool function on its own:

print(get_weather("New York"))          # Expected to print a success report
print(get_weather("Paris"))              # Expected to indicate an error (since Paris not in mock DB)

This would output something like:

---  Tool: get_weather called for city: New York ---
{'status': 'success', 'report': 'The weather in New York is sunny ...'}
---  Tool: get_weather called for city: Paris ---
{'status': 'error', 'error_message': "Sorry, I don't have weather information for 'Paris'."}

This confirms our tool logic.

Define the Agent (weather_agent): Now create an Agent that uses this tool. The agent requires:

- name: a unique name (e.g., "weather_agent_v1").
- model: which LLM to use (we might use a Gemini model constant, like MODEL_GEMINI_2_0_FLASH).
- description: a short description of the agent’s role.
- instruction: detailed instructions for the agent’s behavior and how to use the tool.
- tools: the list of tool functions the agent can call (here just [get_weather]).

Example:

from google.adk.agents import Agent
AGENT_MODEL = MODEL_GEMINI_2_0_FLASH    # using a Gemini model for the agent
---
# Weather Agent Setup

weather_agent   = Agent(
name="weather_agent_v1",
model=AGENT_MODEL,
description="Provides weather information for specific cities.",
instruction=(
"You are a helpful weather assistant.  "
"When  the user asks for the weather in a specific city, "
"use the 'get_weather' tool to find the information. "
"If the tool returns an error, inform  the user politely. "
"If the tool is successful, present the weather report clearly."
),
tools=[get_weather],
)
print(f"Agent '{weather_agent.name}' created using model '{AGENT_MODEL}'.")

The instruction tells the agent exactly when and how to use get_weather (and how to handle its output).

We print a confirmation that the agent is created.

# Setup Runner and Session

To actually interact with this agent in code (outside of adk web), we set up a SessionService and a Runner:

from google.adk.sessions import   InMemorySessionService
from google.adk.runners import Runner
#  Session management (in-memory  for simplicity)
session_service = InMemorySessionService()
APP_NAME  =  "weather_tutorial_app"
USER_ID  =  "user_1"
SESSION_ID   = "session_001"
session  =  session_service.create_session(app_name=APP_NAME, user_id=USER_ID,
session_id=SESSION_ID)
print(f"Session created: App='{APP_NAME}', User='{USER_ID}',
Session='{SESSION_ID}'")
#  Runner to manage the agent execution loop
runner =  Runner(
agent=weather_agent,
app_name=APP_NAME,
session_service=session_service
)
print(f"Runner created for agent '{runner.agent.name}'.")

The Runner will handle the loop of sending a user message to the agent, invoking the model and tools, and returning events. We created a session (with InMemorySessionService) for storing the conversation.
---
# Interact with the Agent (async)

ADK’s runner works asynchronously. We define a helper coroutine to send a query and print the final response:

from google.genai import types   # for Content and Part
async def call_agent_async(query: str, runner, user_id, session_id):
&quot;&quot;&quot;Sends a query to  the agent and prints the final response.&quot;&quot;&quot;
print(f&quot;\n&gt;&gt;&gt; User Query: {query}&quot;)
content  =  types.Content(role='user', parts=[types.Part(text=query)])
final_response_text  =  &quot;Agent did not produce a final response.&quot;
async for   event in runner.run_async(user_id=user_id,    session_id=session_id,
new_message=content):
#  Uncomment to see  all  events:
#  print(f&quot;[Event]   Author: {event.author}, Type: {type(event).__name__},
Final: {event.is_final_response()}, Content: {event.content}&quot;)
if event.is_final_response():
if event.content and event.content.parts:
final_response_text   = event.content.parts[0].text
elif event.actions  and event.actions.escalate:
final_response_text   = f&quot;Agent escalated:  {event.error_message
or 'No specific    message.'&quot;}
break
print(f&quot;&lt;&lt;&lt;    Agent Response: {final_response_text}&quot;)

This function sends the query as a user Content to the runner and iterates through the events. It prints each user query and the final agent response for that turn. We specifically check for event.is_final_response() which indicates the agent’s final answer for the query 66. If found, we extract the text and break out.

Now we can test some conversations with our agent by calling this coroutine:

# Running a   few  sample queries
await  call_agent_async(&quot;What is the weather like in London?&quot;, runner=runner,
user_id=USER_ID,    session_id=SESSION_ID)
await  call_agent_async(&quot;How about Paris?&quot;, runner=runner,      user_id=USER_ID,
session_id=SESSION_ID)  # Paris not in DB
await  call_agent_async(&quot;Tell me the weather in New York&quot;,      runner=runner,
user_id=USER_ID,    session_id=SESSION_ID)

We expect output roughly like:

&gt;&gt;&gt;  User Query:   What is the weather like in London?
---  Tool: get_weather called for city: London ---
&lt;&lt;&lt;  Agent Response: It's cloudy  in London with a temperature of 15°C.
---
>> User Query: How about Paris?

--- Tool: get_weather called for city: Paris ---

&lt;&lt;&lt; Agent Response: Sorry, I don't have weather information for 'Paris'.

>> User Query: Tell me the weather in New York

--- Tool: get_weather called for city: New York ---

&lt;&lt;&lt; Agent Response: The weather in New York is sunny with a temperature of 25°C.

This confirms that our agent is using the tool appropriately and responding with the tool’s output or an apology if the tool had no data.

Congratulations – we have built and interacted with our first ADK agent! The agent can interpret user requests, use a tool for information, and produce an answer based on the tool’s result 67. In the next steps, we’ll expand on this foundation.

# Step 2: Multi-Model Agents with LiteLLM

Goal: Experiment with using different underlying LLMs for the same agent logic. We will use LiteLLM, ADK’s integration that allows easy switching between many model providers (OpenAI, Anthropic, etc.) with a unified interface 68 69.

In Step 1, our weather_agent used a specific Gemini model. In real scenarios, you might want to:

- Compare performance of different models (e.g., a faster model vs a more accurate one).
- Use cheaper models for simple tasks and expensive models for complex tasks.
- Provide fallback if one model service is down.

LiteLLM simplifies this by letting you wrap model identifiers so ADK knows to route requests through the LiteLLM library (which supports 100+ models across providers) 69.

We will:

1. Import LiteLLM.
2. Define a GPT-4-powered weather agent and a Claude-powered weather agent, reusing the same tool and similar instructions.
3. Give each agent its own Runner and Session (to isolate their interactions).
4. Immediately test each agent to see any differences in response style.

Import LiteLLM: (We already did this in Step 0 setup, but ensure we have it)

from google.adk.models.lite_llm import LiteLlm
We assume we have API keys set for OpenAI and Anthropic (via environment variables, as was done in Step 0 in the notebook setup). The constants MODEL_GPT_4O and MODEL_CLAUDE_SONNET represent model identifiers for OpenAI’s GPT-4 (maybe an “optimized” version) and Anthropic’s Claude (Sonnet edition) respectively, which we defined earlier 70.

Define and test agent with OpenAI GPT-4 model:
---
weather_agent_gpt  =   None
runner_gpt = None
try:
weather_agent_gpt   = Agent(
name="weather_agent_gpt",
model=LiteLlm(model=MODEL_GPT_4O),  # Wrap the model ID with LiteLlm
description="Provides weather information (using GPT-4o).",
instruction="You are a helpful weather assistant powered by GPT-4o. "
"Use the 'get_weather' tool for city weather requests. "
"Clearly present successful reports or polite error messages based on the tool's
output status.",
tools=[get_weather],
)
print(f"Agent '{weather_agent_gpt.name}' created using model
'{MODEL_GPT_4O}'.")
# Setup dedicated session service for this agent
session_service_gpt = InMemorySessionService()
APP_NAME_GPT  =  "weather_tutorial_app_gpt"
USER_ID_GPT  = "user_1_gpt"
SESSION_ID_GPT   =  "session_001_gpt"
session_gpt  = session_service_gpt.create_session(app_name=APP_NAME_GPT,
user_id=USER_ID_GPT,     session_id=SESSION_ID_GPT)
print(f"Session created: App='{APP_NAME_GPT}', User='{USER_ID_GPT}',
Session='{SESSION_ID_GPT}'")
runner_gpt =  Runner(agent=weather_agent_gpt, app_name=APP_NAME_GPT,
session_service=session_service_gpt)
print(f"Runner created for            agent '{runner_gpt.agent.name}'.")
# Test the GPT-powered agent
print("\n--- Testing GPT Agent ---")
await call_agent_async("What's the    weather in Tokyo?", runner=runner_gpt,
user_id=USER_ID_GPT,     session_id=SESSION_ID_GPT)
except Exception as e:
print(f"            Could not create  or run GPT agent '{MODEL_GPT_4O}'. Check API Key
and  model name.           Error: {e}")
In this code: - We wrap    MODEL_GPT_4O with LiteLlm to indicate this agent should use OpenAI’s model
via LiteLLM                71 . - We isolate it in its own session (APP_NAME, USER_ID, SESSION_ID are suffixed with _gpt
for clarity) 72 . - We immediately call call_agent_async with a query to see the response 73 .
If successful, we’ll see output similar to earlier but possibly phrased slightly differently by GPT-4. For
example, GPT-4 might respond with more       verbose or differently worded answers, even though the
underlying tool data is the same.
Now define and test agent with Anthropic Claude:
---
# Weather Agent Setup

weather_agent_claude = None
runner_claude = None
try:
weather_agent_claude  =  Agent(
name="weather_agent_claude",
model=LiteLlm(model=MODEL_CLAUDE_SONNET),
description="Provides weather information (using Claude Sonnet).",
instruction="You are a helpful weather assistant powered by Claude Sonnet. "
"Use the 'get_weather' tool for city weather requests. "
"Analyze the tool's dictionary output ('status', 'report'/'error_message'). "
"Clearly present successful reports or polite error messages.",
tools=[get_weather],
)
print(f"Agent '{weather_agent_claude.name}' created using model '{MODEL_CLAUDE_SONNET}'.")
session_service_claude   = InMemorySessionService()
APP_NAME_CLAUDE  = "weather_tutorial_app_claude"
USER_ID_CLAUDE  = "user_1_claude"
SESSION_ID_CLAUDE =   "session_001_claude"
session_claude  = session_service_claude.create_session(app_name=APP_NAME_CLAUDE,
user_id=USER_ID_CLAUDE,
session_id=SESSION_ID_CLAUDE)
print(f"Session created: App='{APP_NAME_CLAUDE}', User='{USER_ID_CLAUDE}', Session='{SESSION_ID_CLAUDE}'")
runner_claude =  Runner(agent=weather_agent_claude, app_name=APP_NAME_CLAUDE,
session_service=session_service_claude)
print(f"Runner created for agent '{runner_claude.agent.name}'.")
print("\n--- Testing Claude Agent ---")
await call_agent_async("Weather in London please.", runner=runner_claude,
user_id=USER_ID_CLAUDE, session_id=SESSION_ID_CLAUDE)
except Exception as e:
print(f"   Could not create or run Claude agent '{MODEL_CLAUDE_SONNET}'. Check API Key and model name. Error: {e}")

# Observation

We do the analogous setup for Claude (Anthropic) 74 75 76 and test it with a query. If keys are set and the model is accessible, we’ll see output. Claude might have a different style too.

Check the outputs of both agents:

1. Both agents successfully use get_weather (the log --- Tool: get_weather called --- should appear for each).
2. The final responses might differ in wording due to the different LLMs. For instance, GPT-4 might say "Currently, in Tokyo..." whereas Claude might say "The weather in Tokyo is ...". The content should be similar because the tool’s report is the same.
---
     but phrasing can vary 77             78 . 3. This confirms ADK + LiteLLM allowed us to switch models without
     changing our agent logic.
     This step demonstrates the ease of experimenting with model providers. We kept our core agent logic and
     tools identical and just swapped out the model. ADK’s design and LiteLLM handle the rest. In a production
     app, you might let a config or environment variable decide which model to use, or even use multiple
     models in a hierarchy as we’ll do next.
     Step 3: Agent Team Delegation (Greetings & Farewells)
     Goal: Move from a single agent to a team of agents that can handle different types of user requests by
     delegation. We will create two new simple agents: one for greetings and one for farewells, and integrate
     them with our weather agent.
     Why multi-agent? As complexity grows, splitting responsibilities among specialized agents can make the
     system more modular, easier to maintain, and even allow use of different models for different tasks 79  80 .
     For example, greeting and farewell might be handled by a very lightweight model, while weather queries
     use a more powerful model.
     We’ll do the following: 1. Define two simple tools: say_hello and say_goodbye               – functions that
     produce a greeting or farewell message 81  82 . 2. Create two sub-agents: greeting_agent                 and
farewell_agent , each with a very focused purpose and using the corresponding tool 83              84 . 3. Update
     our main weather agent (we’ll call it weather_agent_v2  for this version) to be the          root agent that
     includes the two new agents as its sub_agents    85  86 . We will adjust its instructions to clarify when to
     delegate. 4. Test the system by sending mixed queries (greetings, weather questions, farewells) to the root
     agent to see it delegate appropriately.
     1. Define greeting and farewell tools:
      def  say_hello(name: str  =  "there") -> str:
           """Provides  a simple greeting, optionally addressing the user     by name.
           Args:
               name (str, optional): The name of the person to      greet. Defaults to
      "there".
           Returns:
               str: A friendly  greeting message.
           """
           print(f"---  Tool: say_hello called   with name: {name}  ---")
           return  f"Hello, {name}!"
      def  say_goodbye() ->  str:
           """Provides  a simple farewell message to conclude the conversation."""
           print(f"---  Tool: say_goodbye called ---")
           return  "Goodbye! Have a great day."
                                                 22
---
These are straightforward. Note how we include name parameter for say_hello to personalize the greeting if needed. We print logs when these tools are called. (Optional self-test: print(say_hello("Alice")) should print "Hello, Alice!", and print(say_goodbye()) prints "Goodbye! Have a great day.")

# 2. Define the sub-agents:

Each sub-agent will be an Agent with:

- a possibly different model (we can use the same Gemini model or decide to use a smaller model).
- a very narrow instruction that explicitly says “Your ONLY task is to ...” to constrain it.
- a clear description that the root agent will use to identify what this sub-agent does.

# For greeting_agent :

greeting_agent = None
try:
greeting_agent = Agent(
model = MODEL_GEMINI_2_0_FLASH,   # using a Gemini model; could use
# LiteLlm if desired
# model=LiteLlm(model=MODEL_GPT_4O), # Example: if using a different
# model for greetings
name="greeting_agent",
instruction="You are the Greeting Agent. Your ONLY task is to provide a
friendly greeting to the user. "
"Use the 'say_hello' tool to generate the greeting. "
"If the user provides their name, make sure to pass it to
the tool. "
"Do not engage in any other conversation or tasks.",
description="Handles simple greetings and hellos using the 'say_hello'
tool.",  # vital for delegation logic
tools=[say_hello],
)
print(f"  Agent '{greeting_agent.name}' created using model
'{greeting_agent.model}'.")
except Exception as e:
print(f"  Could not create Greeting agent. Error: {e}")

# For farewell_agent :

farewell_agent = None
try:
farewell_agent = Agent(
model  = MODEL_GEMINI_2_0_FLASH, # using the same model for simplicity
# model=LiteLlm(model=MODEL_GPT_4O),  # could use another model if
wanted
)
---
name="farewell_agent",
instruction="You are the Farewell Agent. Your ONLY task is to provide a polite goodbye message. "
"Use the 'say_goodbye' tool when the user indicates they are ending the conversation "
"(e.g., says 'bye' or 'goodbye'). "
"Do not perform any other actions.",
description="Handles simple farewells and goodbyes using the 'say_goodbye' tool.",
tools=[say_goodbye],

print(f"   Agent '{farewell_agent.name}' created using model '{farewell_agent.model}'.")

except Exception as e:
print(f"   Could not create Farewell agent. Error: {e}")

We wrapped these in try/except in case model initialization fails (just as a safeguard; typically if using the same model as before, it should be fine). The printouts confirm creation.

The descriptions (“Handles simple greetings…”, “Handles simple farewells…”) will be key for the root agent’s LLM to decide to delegate 83  87. The instructions restrict each sub-agent’s behavior to prevent them from doing anything beyond their small task.

# 3. Define the root agent (updated Weather Agent):

We now enhance the weather agent to version 2, which knows about the sub-agents. Key changes from v1: -
Add sub_agents=[greeting_agent, farewell_agent] when constructing the Agent. - Update the instruction prompt to explicitly mention the sub-agents and when to delegate to each 88  89. - Use an appropriate model (we can stick with Gemini flash).

weather_agent_team = None

if greeting_agent and farewell_agent and 'get_weather' in globals():
root_agent_model = MODEL_GEMINI_2_0_FLASH
weather_agent_team = Agent(
name="weather_agent_v2",
model=root_agent_model,
description="The main coordinator agent. Handles weather requests and delegates greetings/farewells to specialists.",
instruction="You are the main Weather Agent coordinating a team. Your primary responsibility is to provide weather information. "
"Use the 'get_weather' tool ONLY for specific weather requests (e.g., 'weather in London'). "
"You have specialized sub-agents: "
"1. 'greeting_agent': Handles simple greetings like 'Hi', 'Hello'. Delegate to it for these. "
---
# 2.

'farewell_agent': Handles simple farewells like 'Bye', 'See you'. Delegate to it for these.

Analyze the user's query. If it's a greeting, delegate to 'greeting_agent'. If it's a farewell, delegate to 'farewell_agent'. If it's a weather request, handle it yourself using 'get_weather'. For anything else, respond appropriately or say you cannot handle it.

tools=[get_weather], sub_agents=[greeting_agent, farewell_agent]

print(f"  Root Agent '{weather_agent_team.name}' created using model '{root_agent_model}' with sub-agents: {[sa.name for sa in weather_agent_team.sub_agents]}")

else:

print("  Cannot create root agent because sub-agents or tool are missing.")

if not greeting_agent: print(" - Greeting Agent is missing.")

if not farewell_agent: print(" - Farewell Agent is missing.")

if 'get_weather' not in globals(): print(" - get_weather function is missing.")

We ensure greeting_agent and farewell_agent exist and then create weather_agent_team. The instruction is lengthy but effectively tells the agent about its team and when to use each member.

The root agent’s description is broad but sets context for delegation.

# How delegation works:

With sub_agents set, ADK’s auto-flow delegation is enabled. When weather_agent_team processes an input, the LLM will consider the descriptions of its sub_agents during the reasoning. If the user’s query matches a sub-agent’s description better than the root’s own domain, the LLM can output a special action indicating to transfer to that sub-agent. ADK handles this by routing the message to the sub-agent and then returning control back to the root (or ending the turn) as needed. This is all implicit in the LLM’s decision; we just need to ensure our descriptions and instructions make the delegation intent clear (which we did).

# 4. Interact with the Agent Team:

We’ll set up a new session for testing the team:

import asyncio

if weather_agent_team:

async def run_team_conversation():

print("\n--- Testing Agent Team Delegation ---")

session_service_team = InMemorySessionService()

APP_NAME_TEAM = "weather_tutorial_agent_team"

USER_ID_TEAM = "user_1_agent_team"

SESSION_ID_TEAM = "session_001_agent_team"

session_team =

25
---
# Session Service Team

session_service_team.create_session(app_name=APP_NAME_TEAM,
user_id=USER_ID_TEAM,  session_id=SESSION_ID_TEAM)
runner_team =  Runner(agent=weather_agent_team, app_name=APP_NAME_TEAM,
session_service=session_service_team)
# Now  send different queries:
await  call_agent_async("Hello there!", runner=runner_team,
user_id=USER_ID_TEAM,  session_id=SESSION_ID_TEAM)
await  call_agent_async("What is the weather in New York?",
runner=runner_team, user_id=USER_ID_TEAM,  session_id=SESSION_ID_TEAM)
await  call_agent_async("Thanks, bye!", runner=runner_team,
user_id=USER_ID_TEAM,  session_id=SESSION_ID_TEAM)
await run_team_conversation()
else:
print("Agent team not initialized, cannot run team conversation.")

# We used queries:

- "Hello there!" – a greeting.
- "What is the weather in New York?" – a weather query.
- "Thanks, bye!" – a farewell.

# Expected flow:

1. For "Hello there!", weather_agent_team should delegate to greeting_agent. The greeting_agent will use say_hello and respond (e.g., "Hello!"). The root agent then returns that as the final answer.
2. For the weather question, the root handles it directly with get_weather (no delegation).
3. For "Thanks, bye!", the root should delegate to farewell_agent, which uses say_goodbye and responds (e.g., "Goodbye! Have a great day.").

# If we track the printouts and logs:

- The greeting query likely triggers --- Tool: say_hello called --- from the greeting agent, and the final printed response might be "Hello, there!" (with "there" as default if no name provided).
- The weather query triggers --- Tool: get_weather called ... as before and returns the weather.
- The bye query triggers --- Tool: say_goodbye called --- from the farewell agent and returns the message.

# Our console output might look like:

---  Testing Agent Team Delegation ---
>>>  User Query:    Hello there!
---  Tool: say_hello called  with name: there ---
<<<  Agent Response: Hello,  there!
>>>  User Query:    What is the weather in New York?
---  Tool: get_weather called for city: New York ---
<<<  Agent Response: The weather in New York is sunny with a temperature of 25°C.
>>>  User Query:    Thanks, bye!
---
This demonstrates that our weather_agent_team successfully recognized when to use sub-agents based on the query content7778. The delegation is entirely handled by the LLM’s decision-making using the cues we provided in instructions and descriptions.

# Step 4: Adding Memory with Session State

Goal: Give our agent team memory and personalization by utilizing ADK’s Session State. So far, each user query was handled independently with no memory of previous turns (aside from what’s in the conversation history that the model sees). Using state, agents can persist information across turns (and even update preferences).

We will:

1. Use a fresh SessionService and session to demonstrate state usage in isolation.
2. Initialize the session’s state with a user preference (e.g., temperature unit = Celsius).
3. Create a state-aware version of the weather tool that reads the preferred unit from state and formats output accordingly.
4. Update the root agent to use this new tool and also use output_key to save its final answer to state.
5. Run a conversation where:
- The agent uses the preference to answer (e.g., reports in Celsius).
- We then change the preference in state (to Fahrenheit) and ask again to see a different output.
- Also observe that the agent’s answer gets saved into state.

# What is Session State?

It’s basically a dictionary attached to a session (in-memory or persistent, depending on SessionService) that can store arbitrary keys/values94. Tools can access it via a special parameter (ToolContext) or agents via callback context. We’ll use ToolContext here.

# 1. Initialize new Session Service and state:

from google.adk.sessions import InMemorySessionService
session_service_stateful = InMemorySessionService()
print("   New InMemorySessionService created for state demonstration.")
SESSION_ID_STATEFUL = "session_state_demo_001"
USER_ID_STATEFUL = "user_state_demo"
initial_state = {
"user_preference_temperature_unit": "Celsius"
}
session_stateful = session_service_stateful.create_session(
app_name=APP_NAME_TEAM,    # reuse the agent team app name for consistency
user_id=USER_ID_STATEFUL,
session_id=SESSION_ID_STATEFUL,
state=initial_state
)
---
This creates a new session with an initial state containing {"user_preference_temperature_unit": "Celsius"}. We’ll assume APP_NAME_TEAM from earlier (the multi-agent app) is available.

# 2. Create a state-aware weather tool:

We modify get_weather to respect a preference from the state:

from google.adk.tools import ToolContext

def get_weather_stateful(city: str, tool_context: ToolContext) -> dict:
"""Retrieves current weather with unit preference from state."""
unit = "Celsius"
if tool_context and tool_context.state:
unit_pref = tool_context.state.get("user_preference_temperature_unit")
if unit_pref and unit_pref.lower().startswith("f"):  # if "Fahrenheit"
unit = "Fahrenheit"
print(f"--- Tool: get_weather_stateful called for city: {city} (unit={unit}) ---")
# We will use the same mock data but convert if needed:
data = {
"newyork": {"C": "25°C", "F": "77°F"},
"london": {"C": "15°C", "F": "59°F"},
"tokyo": {"C": "18°C", "F": "64°F"}
}
city_key = city.lower().replace(" ", "")
if city_key in data:
report_temp = data[city_key]["C" if unit == "Celsius" else "F"]
return {"status": "success", "report": f"The weather in {city} is {report_temp}."}
else:
return {"status": "error", "error_message": f"No weather info for '{city}'."}

# Key differences:

- The function signature includes tool_context: ToolContext as the last parameter.
- ADK will pass this in automatically when the tool is used by an agent.
- We read user_preference_temperature_unit from tool_context.state. If it starts with "f" (fahrenheit), we set unit = "Fahrenheit"; otherwise default to Celsius.
- We prepared a small dataset that has both C and F values. In a real scenario, we might store one and convert on the fly; here for simplicity we hardcoded.
- We log the call with the unit for clarity.
- The output report includes the temperature with the chosen unit.

# 3. Update the root agent to use get_weather_stateful and use output_key:

We create a new version of the root agent (say weather_agent_v3 or modify weather_agent_team):
---
# Weather Agent with Memory

weather_agent_team_stateful = Agent(

name="weather_agent_v3_stateful",

model=root_agent_model,

description="Weather agent with memory; handles weather + delegates, uses stateful tool.",

instruction=(

"You are the main Weather Agent with memory. You handle weather queries (with a preference for units) and delegate greetings/farewells. "

"If a weather question is asked, use the 'get_weather_stateful' tool to include the user's preferred temperature unit. "

+ weather_agent_team.instruction  # reuse previous instructions for delegation

),

tools=[get_weather_stateful],

sub_agents=[greeting_agent, farewell_agent],

output_key="last_weather_report"

)

Here: - We largely copy the setup from weather_agent_team, but replace the weather tool with get_weather_stateful. - We added output_key="last_weather_report" 98. This means after the agent generates a final answer, ADK will store that answer text into session.state["last_weather_report"]. - The instruction is adjusted to mention “with memory” and instruct to use get_weather_stateful so that it knows to consider user preferences.

# 4. Test the Stateful Behavior:

We use the session_service_stateful created earlier, which already has a session with the Celsius preference. We’ll run a short conversation:

runner_stateful = Runner(agent=weather_agent_team_stateful,

app_name=APP_NAME_TEAM, session_service=session_service_stateful)

# Query when preference is Celsius:

await call_agent_async("What is the weather in London?", runner=runner_stateful,

user_id=USER_ID_STATEFUL, session_id=SESSION_ID_STATEFUL)

# Change the preference in state to Fahrenheit:

session_stateful.state["user_preference_temperature_unit"] = "Fahrenheit"

print("Preference changed to Fahrenheit in session state.")

# Query again after preference change:

await call_agent_async("What is the weather in London?", runner=runner_stateful,

user_id=USER_ID_STATEFUL, session_id=SESSION_ID_STATEFUL)

# Check the saved output in state:

print("Saved last_weather_report:", session_stateful.state.get("last_weather_report"))
---
# Expected outcomes:

- The first query (with preference Celsius) should yield a response like "It's cloudy in London with a temperature of 15°C." (from our get_weather_stateful logic).

- After changing preference to Fahrenheit, the second query’s response should say "59°F" instead of "15°C", reflecting the new preference.

- The output_key feature should have saved the last response text in session_stateful.state["last_weather_report"]. We print it to verify it matches the agent’s spoken answer.

Thus, we’ve shown that the agent can remember and adapt:

- It read from state (the preferred unit) to format its answer appropriately.
- We manually updated the state to simulate the user changing a preference (one could also imagine an agent tool that updates this based on user input).
- The agent’s final response was automatically stored in state via output_key.

This mechanism can be extended to remember names, past topics, or anything else that should persist within a session.

# Step 5: Safety Guardrail – before_model_callback

Goal: Introduce a safety mechanism to filter or modify user inputs before they reach the LLM. Specifically, we’ll implement a before_model_callback that scans user queries for certain disallowed content and blocks them.

# Callback Basics:

ADK’s callbacks allow custom code execution at specific times. The before_model_callback is invoked after the agent has compiled the conversation context but before sending it to the model (LLM).

We can use it to:

- Reject or alter user queries that contain certain keywords.
- Prepend or append additional instructions dynamically.

Here, we will implement a simple guardrail that looks for the keyword "BLOCK" in the user’s message and if found, prevents the LLM from being called, instead immediately returning a response indicating disallowance.

# 1. Define the guardrail callback function:

from google.adk.agents.callback_context import CallbackContext
from google.adk.models.llm_request import LlmRequest
from google.adk.models.llm_response import LlmResponse
from google.genai import types
from typing import Optional

def block_keyword_guardrail(callback_context: CallbackContext, llm_request: LlmRequest) -> Optional[LlmResponse]:
"""before_model_callback that blocks the request if it contains 'BLOCK'."""
# Examine the last user message in llm_request
if llm_request.contents:
# Get the last content part assuming the last entry is the user message
last_content = llm_request.contents[-1]
if last_content.parts:
---
user_text = last_content.parts[-1].text

if user_text and "BLOCK" in user_text.upper():

# Create a response that indicates blocking

blocked_text = "I'm sorry, I cannot process that request."

print(f"⚠ Blocking request containing disallowed keyword. User said: {user_text}")

# Construct LlmResponse to bypass the model

content = types.Content(role='assistant', parts=[types.Part(text=blocked_text)])

return LlmResponse(contents=[content])

return None  # Allow processing to continue if no block

# Explanation:

- We inspect llm_request.contents, which is the list of conversation parts going to the LLM 103. The last content is typically the user’s new message.
- If the user’s text contains "BLOCK" (case-insensitive), we print a message and construct an LlmResponse that has the assistant’s reply ready 104 105. By returning this LlmResponse, ADK will skip calling the LLM and use this as the result instead 105.
- The response we create is a polite refusal: "I'm sorry, I cannot process that request." (You might customize this per guidelines).
- If no disallowed keyword is found, return None to let the LLM proceed.

# 2. Update the agent to use the callback:

Let’s take our stateful root agent from step 4 and add this callback:

weather_agent_team_stateful.before_model_callback = block_keyword_guardrail

Alternatively, one could pass it during Agent init via before_model_callback=... parameter if constructing anew.

Now weather_agent_team_stateful will invoke block_keyword_guardrail before each LLM call.

# 3. Test the guardrail:

We use the same runner/session as in step 4 (so it still has our state and preferences):

# Test normal query (should work as before)
await call_agent_async("What is the weather in Tokyo?", runner=runner_stateful, user_id=USER_ID_STATEFUL, session_id=SESSION_ID_STATEFUL)
# Test blocked query
await call_agent_async("This contains BLOCK keyword.", runner=runner_stateful, user_id=USER_ID_STATEFUL, session_id=SESSION_ID_STATEFUL)

# Expected:

- The normal query goes through (with the agent possibly using the get_weather_stateful tool as before).
- The second query contains "BLOCK", so our block_keyword_guardrail should trigger.
---
We expect no tool or LLM execution; instead, the agent should immediately respond with "I'm sorry, I cannot process that request." We should see the print "⚠ Blocking request..." in console, and the call_agent_async final output as that apology message.

Thus, we have inserted a simple safety check that can prevent certain inputs from being processed. This could be extended to more complex checks (like scanning for profanity, certain topics, etc.). The advantage of doing it in before_model_callback is that it catches it early – saving on API calls and ensuring the model never sees the disallowed content.

# Step 6: Safety Guardrail – before_tool_callback

Goal: Add another layer of safety, but this time focusing on tool usage. The before_tool_callback is invoked right before a tool function is executed, allowing the agent to potentially intercept or alter the tool call. We’ll use it to, for instance, block the get_weather_stateful tool if the city argument is disallowed (e.g., maybe we decide the agent should not provide weather for "Paris" for some reason). This is somewhat artificial, but demonstrates how you can prevent certain tool actions.

# 1. Define a before_tool_callback function:

We’ll block the tool if the city is "Paris" (which in our data already returns an error, but let’s say we want to enforce it explicitly):

from google.adk.events import ToolInvocation
def block_paris_tool(callback_context: CallbackContext, tool_invocation: ToolInvocation) -> Optional[types.Content]:
"""before_tool_callback to block weather tool for city 'Paris'."""
tool_name = tool_invocation.tool.__name__ if tool_invocation.tool else ''
if tool_name == 'get_weather_stateful':
args = tool_invocation.args or {}
city = args.get('city') or ''
if city.lower() == 'paris':
print("⚠ Blocking tool execution for city Paris.")
# Return an assistant content as a response instead of executing tool
return types.Content(role='assistant', parts=[types.Part(text="(No data for Paris)")])
return None  # allow tool to proceed if not blocked

# Explanation:

- tool_invocation.tool gives us the actual function about to be called, and tool_invocation.args are the arguments it will be called with.
- We check if the tool is get_weather_stateful and the city argument is "paris".
- If so, we print a warning and return a types.Content with a message "(No data for Paris)" (just as an example placeholder response).
---
returning a Content, ADK will skip the actual tool call and treat this content as if it were the tool’s result, packaged as an assistant message. - If no issue, return None to let the tool execute normally.

1. Attach this callback:

weather_agent_team_stateful.before_tool_callback = block_paris_tool

Now, before executing any tool, the agent will run block_paris_tool. If it returns a Content, the tool won’t run.

Test the tool guardrail:

# Preference to Celsius for clarity

session_stateful.state["user_preference_temperature_unit"] = "Celsius"

# Ask for Paris weather (should trigger tool block)

await call_agent_async("What is the weather in Paris?", runner=runner_stateful, user_id=USER_ID_STATEFUL, session_id=SESSION_ID_STATEFUL)

Now, normally our get_weather_stateful would return an error for Paris because we had no data. But with the before_tool_callback, we intercept earlier:

- The agent will likely identify "weather in Paris" as needing the tool.
- Before the tool runs, block_paris_tool fires, sees city "Paris", and returns a Content.
- ADK then will not call get_weather_stateful at all. Instead, the Content "(No data for Paris)" is injected as if it were the assistant’s message (or tool’s output).
- The agent’s final answer might then simply be "(No data for Paris)" or some wrapped form of it. (In our implementation, we directly return assistant content with that message, so the user sees exactly that.)

We should see the warning log and the final output reflecting the blocked tool usage. This demonstrates you can put guardrails on tool execution: for example, you might prevent an agent from calling an external API with certain parameters (maybe to avoid offensive image generation or querying a forbidden URL). The callback could even modify arguments (not shown here) or choose a different tool on the fly.

# Conclusion: Your Agent Team Complete

Congratulations! You’ve built a sophisticated multi-agent system with ADK, starting from a single tool agent and ending with a stateful, safe, multi-agent team.

To recap, through Steps 1–6 you have:

- Built a basic agent with a custom tool.
- Integrated multiple LLMs using LiteLLM for the same agent logic.
- Created an agent hierarchy with a root agent and two sub-agents for modular handling of different tasks.
- Added memory via session state to remember user preferences and persist outputs.
- Implemented safety callbacks to guard against certain inputs and tool usages.
---
# Key Takeaways:

- Agents & Tools: Clear separation of concerns; docstrings and instructions are vital for guiding LLM behavior 109.
- Runners & Sessions: They enable conversation continuity and orchestration. You used InMemorySessionService for simplicity, but other implementations can persist data beyond the runtime 110.
- Delegation: By using sub_agents and well-crafted descriptions, ADK can automatically route queries to specialized agents, illustrating the power of multi-agent design 111.
- State (Memory): Session state allowed personalization (Celsius vs Fahrenheit). It’s a simple but powerful way to make conversations context-aware and user-specific 111.
- Callbacks: Provided hooks for safety and control without hardcoding into your main logic. They let you enforce policies (like blocking content) and do custom processing at crucial moments 112.
- LLM Flexibility: ADK (with LiteLLM) doesn’t lock you to one model – you can mix and match to optimize cost and performance, and even simultaneously run multiple models for different tasks 113.

# Where to go next?

- Integrate real APIs (e.g., replace mock get_weather with a real weather API call).
- Expand the agent team with new capabilities (news agent, joke agent, etc.) and try more complex delegation.
- Use persistent storage for session data if you need to maintain memory long-term or across server restarts (e.g., use a Firestore-backed SessionService).
- Explore evaluation more formally: ADK allows you to create evaluation sets (conversations with expected outcomes) and run them to get metrics on how often the agent meets expectations, which is great for regression testing improvements.
- Keep an eye on ADK’s evolving features (like streaming enhancements and more built-in tools).

Your Weather Agent Team is a solid foundation. ADK has empowered you to define complex agent behavior in a structured way – treating each piece (tools, memory, callbacks, sub-agents) as components that can be added or modified with minimal friction.

# Happy building with ADK!

# Agents

ADK provides different types of agents and patterns for structuring their behavior:

- LLM Agents– Agents driven by a Large Language Model, capable of open-ended reasoning and tool use.
- Workflow Agents – Deterministic agents that follow a fixed flow (sequential, looping, or parallel execution).
- Custom Agents – Extend or modify agent behavior by subclassing or composition.
- Multi-Agent Systems – Architectures where multiple agents collaborate or are hierarchically organized (as we saw in the tutorial).
- Models – How ADK interfaces with underlying LLMs (including custom or third-party models).

Let’s go through these categories.
---
# LLM Agents

LLM agents are agents that rely on a Large Language Model to decide their actions. They form the core of dynamic behavior in ADK. When you create an Agent with a model (like "gemini-2.0" or a LiteLlm wrapped model) and provide it with instructions and tools, you are essentially making an LLM agent.

# Key components in configuring an LLM Agent:

- Identity and Purpose: When defining an agent, give it a clear name and description. The description should succinctly state what the agent does or knows. This isn’t just for documentation – the description is used in multi-agent contexts (for example, the root agent will see sub-agents’ descriptions to decide delegation).
- Instruction (Prompt): This is the guiding prompt for the agent’s behavior. It can include role, persona, goals, and explicit directions on tool usage. Good instructions improve the agent’s reliability. For instance, instruct the agent to only use tools when necessary and how to format answers.
- Tools: Equipping an LLM agent with tools gives it the ability to take actions. You assign tools via the tools=[ ... ] parameter. The agent’s LLM will determine when to invoke a tool based on its training and the tool’s docstring – ADK handles making the tool call and returning the result to the LLM’s context.
- Memory: On their own, LLM agents do not have memory except the conversation history they are given. ADK manages that history via events. However, if you want an agent to have long-term memory or knowledge of user preferences, you incorporate state or memory services (like we did with session state).
- Advanced settings: ADK allows fine-tuning of LLM calls per agent:
- generate_content_config: You can pass a config object to control generation parameters (e.g., temperature, max tokens) for that agent’s LLM calls.
- input_schema and output_schema: You can define a structure for inputs and outputs (especially useful if you want the LLM’s output to conform to a schema – ADK will attempt to parse it).
- output_key: As seen, automatically stores outputs in state.
- include_contents: Allows an agent to include certain prior contents (like some context or examples) in each LLM request beyond what’s in the current session events.
- Planning & Code Execution: Some LLM agents can incorporate a planning phase or use special tools for code execution. For example, ADK can integrate with an internal code executor tool where the LLM writes code which gets executed (like a scratchpad for calculation). There are planner utilities and patterns if an agent needs to break down tasks (defer to [Planning & Code Execution section]).

# Example of constructing an LLM agent:

35
---
# qa_agent

qa_agent  = Agent(
name="qa_agent",
model="gemini-2.0",
description="Answers questions about company policies.",
instruction="You are an HR assistant. Answer questions about company
policies using the documentation provided. If unsure, say you don't know.",
tools=[search_docs_tool],    # suppose this tool searches a docs database
output_key="last_answer"
)

This agent will, on each question, possibly use search_docs_tool (if the LLM chooses to) and produce
an answer. The last answer is saved in state for reference. We might also add a before_model_callback
to inject some policy text or ensure certain tone, etc.

In summary, LLM agents in ADK are very flexible – essentially you configure how the LLM should behave
and what it can do, and ADK manages the interaction loop with the LLM (including tool execution and
callbacks).

# Workflow Agents

Workflow agents are a set of agent types in ADK that execute a predefined control flow of steps, rather
than relying on an LLM to decide the flow. They are useful for scenarios where the sequence of actions is
known or needs to be strictly controlled.

ADK provides three main workflow agent classes:

- SequentialAgent – Executes a list of sub-steps or sub-agents in sequence, one after another.
- LoopAgent – Repeats executing a sub-agent until a condition is met or for a fixed number of iterations.
- ParallelAgent – Executes multiple sub-agents in parallel (concurrently) and waits for all to finish.

These are typically configured with other agents or tasks as their components. Workflow agents do not use
an LLM to make decisions; their behavior is deterministic as configured.

# Sequential Agents

A SequentialAgent runs a sequence of steps. Each step could be:

- Another agent (e.g., an LLM agent or a tool-wrapping agent).
- A function/tool that executes some operation.

You define it by providing an ordered list of agents/tools to sub_agents (the term is reused for
consistency, though they might not all be agents). The runner will execute each in turn. For example:

from google.adk.agents import SequentialAgent
pipeline_agent   = SequentialAgent(
name="pipeline_agent",
)
---
# Agents Overview

sub_agents=[step1_agent, step2_agent, step3_agent]

Here, step1_agent runs first, then step2_agent, then step3_agent. The output of one can be fed into the next via the shared context (they share session state by default). This is good for data processing pipelines or multi-step processes where order is fixed.

# Loop Agents

A LoopAgent repeats execution. It could be used to implement retries, or to iterate over a dataset, etc. You configure it with:

- A sub-agent or tool to execute each iteration.
- A loop condition (could be number of iterations or a conditional based on state).

For example:

from google.adk.agents import LoopAgent
loop_agent = LoopAgent(
name="retry_agent",
sub_agent=some_agent,  # the agent to execute each time
max_iterations=3,
# Optionally, a condition function to decide to continue or break early
)
This would run some_agent up to 3 times (you might check its output in state and stop early if success).

# Parallel Agents

A ParallelAgent runs multiple agents simultaneously. This is useful if you have tasks that can be done concurrently. ADK will launch all sub-agents and gather their results.

Example:

from google.adk.agents import ParallelAgent
parallel_agent = ParallelAgent(
name="multi_query_agent",
sub_agents=[agent_a, agent_b, agent_c]
)
This could query three different sources at once via three sub-agents, and then ADK collects their outputs. You might combine results afterwards (the combination logic can be another step or handled by callbacks).
---
Note: Parallel execution still occurs asynchronously within the Python event loop, so it’s concurrent but not multi-threaded by default. For I/O-bound agents (like ones calling external APIs) this can speed things up.

# Using Workflow Agents

Workflow agents are typically not LLM-driven (though their sub-agents might be LLM agents). They don’t have an instruction or use the LLM’s decision making. Instead, they orchestrate other agents.

One common pattern: Use a SequentialAgent to enforce a pattern around an LLM call. For instance, you might have:

1. A tool to pre-process user input.
2. An LLM agent to generate an answer.
3. Another tool to post-process the answer (like proofreading or formatting).

By chaining these in a SequentialAgent, you ensure the flow happens exactly in that order every time.

# Custom Agents

ADK is extensible – you can create custom agent classes if needed. For most cases, composition of built-in features suffices, but if you have very specific requirements, you might subclass BaseAgent or another agent type.

# Custom Agent Use Cases:

- Implement a unique decision-making mechanism not covered by LLM or workflow agents.
- Integrate a completely different type of decision engine (say a rule-based system).
- Modify how certain steps are executed or logged.

When writing a custom agent, you typically subclass BaseAgent and override methods such as:

- run_async() or lower-level parts of the loop.
- How it handles input or output events.

However, this is advanced and the documentation suggests first trying to accomplish your needs with combinations of existing components and callbacks (which are often sufficient).

# Multi-Agent Systems

This refers to designs where multiple agents work together, as we have done with the Agent Team. ADK provides the structure (like the sub_agents mechanism, and the AgentTool) to allow multi-agent orchestration.

# Some patterns for multi-agent systems:

- Hierarchical (Tree): One top-level agent delegates to sub-agents (which themselves could delegate further down). We built a small example of this. The key is using sub_agents list and ensuring descriptions/instructions are set for delegation.
- Heterogeneous agents working in parallel: e.g., a ParallelAgent that runs several specialized agents and a coordinator that combines their results.
- Agent societies: Agents that communicate with each other (ADK’s design currently centers on a single orchestrator calling sub-agents rather than free-form agent-to-agent messaging, but you can simulate messaging via intermediate states or events).

The AgentTool concept is important: it allows one agent to use another agent as if it were a tool. For example, instead of automatic delegation, you could explicitly give an agent a tool that is actually a function.
---
# Models

The Models section of the docs details how ADK interfaces with underlying LLMs:

- ADK has an abstraction for models (the BaseLlm class). Concrete implementations exist for Google’s models, and LiteLLM acts as an adapter for many others.
- You can configure global or per-agent parameters for generation (like temperature, top_k, etc. in generate_content_config).
- It discusses how to handle model inputs/outputs, e.g., input schema (to structure the input parts that the model sees) and output schema (to parse the model’s output into a structured format).
- The MCP (which likely stands for something like Multi-Call Pattern or a protocol) might be described under the Evaluate or MCP section, possibly related to how models handle certain structured prompts.

The key takeaway is that ADK tries to make model usage flexible: you can easily swap models, use multiple models, and control their generation behavior, all without changing your agent logic.

# Tools

Tools in ADK give agents the ability to do more than just chat – they let agents perform actions like API calls, database queries, computations, etc. Tools are central to making agents actually useful in practical applications.

ADK categorizes tools in the documentation:

- Function Tools: Custom tools you create from Python functions (and special variants like long-running function tools, or treating agents as tools).
- Built-in Tools: ADK comes with some ready-made tools (e.g., search engines, code execution, calculators, etc.).
- Third-Party Tools: Integrations with external libraries or services (LangChain tools, etc.).
- Google Cloud Tools: Tools for interacting with Google Cloud services (perhaps searching Google, using Vertex AI features, Cloud Storage, etc.).
- MCP Tools: Possibly tools related to the Model-Call Patterns or something called MCP (this could be an advanced concept).
- OpenAPI Tools: Tools that are auto-generated from OpenAPI specifications (so an agent can call REST APIs described by an OpenAPI doc).
- Authentication: How to handle auth for tools that require credentials (ensuring keys aren’t exposed to the LLM, etc.).

Let’s break down a couple:

# Function Tools

Function tools are the standard way to add capabilities. Any Python function can be a tool, but ADK provides the FunctionTool wrapper to add metadata if needed (though ADK will wrap plain functions automatically too). The important aspects of a function tool include:
---
to pass; clear naming and docstring help.

- Return Type: Ideally simple types or dicts. If returning a complex object, you’ll likely convert it to JSON/dict.
- Docstring: As emphasized, a clear docstring is crucial. It should explain what the tool does, the meaning of parameters, and what it returns65.
- Best Practices: Keep tools side-effect free (unless the point is to do an action like send an email – then be cautious). They should ideally return information rather than directly performing irreversible actions, unless you intend that.

ADK also supports:

- Long-Running Function Tools: If a tool might take a long time, ADK can handle it specially by yielding intermediate events. There’s likely an example where a function yields progress and ADK wraps that into events that can be streamed to the user123.
- Agent-as-a-Tool: You can wrap an entire agent to be used as a tool by another agent124. This is what AgentTool does. The difference from sub_agents is that AgentTool is invoked like a function call (the parent agent explicitly decides to call it), whereas sub_agents delegation is more implicit.

# Built-in Tools

ADK likely provides built-in tools for common needs. Some known built-ins could include:

- Search: A tool that searches the web or a knowledge base.
- Code Execution: A tool to execute code (Python) and return output.
- Calculator: Solve math expressions.
- Datetime: Get current time/date.
- etc.

Using built-in tools saves time – you just import them from google.adk.tools and include in your agent’s tools. For example, google_search (used in the streaming quickstart) is a built-in that calls Google Search API.

Each built-in tool should have documentation on usage and any required setup (e.g., the search tool might need an API key or use an internal service).

# Third-Party Tools

ADK can integrate with tools from other frameworks:

- Possibly LangChain’s tool library: ADK could treat a LangChain tool as a callable function.
- CrewAI (if mentioned): Another agent framework’s tools.

Basically, if you have a function or class from elsewhere that performs an action, you can wrap it for ADK.

# Google Cloud Tools

These might be specialized tools to interact with GCP services:

- e.g., a tool to read from a Cloud Storage bucket,
- or interact with BigQuery,
- or use a Vertex AI endpoint directly.

They would likely require Google Cloud credentials. ADK’s docs mention authentication, so presumably there’s guidance on setting up service account keys or user credentials for tools.

# MCP Tools

“MCP” appears a few times (in nav: under Evaluate and a section by itself). Possibly stands for Multi-Call Prompt or something Control Protocol. Without speculation, maybe ADK has a concept of a tool that handles multiple prompt turns automatically.
---
# OpenAPI Tools

This is interesting: ADK can integrate with OpenAPI by automatically generating a tool for each endpoint of an API described by an OpenAPI spec. That means:

- Give ADK an OpenAPI (Swagger) JSON,
- It will create function tools for each operation (with proper parameters),
- The agent can then call, say, createUser() tool and ADK will perform the HTTP call.

This significantly opens up integration possibilities. One would need to be careful with authentication (like API tokens), but ADK’s Authentication section likely covers how to securely provide tokens to those tools (so that the LLM doesn’t see them, using placeholders perhaps).

# Authentication

For any tool that calls external services (especially ones requiring API keys, OAuth tokens, etc.), you must avoid exposing credentials in the agent’s prompt (the LLM shouldn’t see them). ADK likely offers patterns:

- Setting credentials in environment or config,
- Tools that automatically include credentials in HTTP headers without them being part of the content the LLM sees (e.g., using a safe requests call).
- Possibly a credential manager or an AuthToolContext to fetch tokens.

The Authentication docs probably instruct to use environment variables (like we did with GOOGLE_API_KEY in .env) and how ADK can load them.

Important: When building agents, ensure that keys are loaded into os.environ and not hard-coded in prompts. ADK’s callback context also has requested_auth_configs in events – indicating that a tool might need auth – seen in the events output snippet, though that might be an advanced feature.

In summary, ADK’s Tools system is robust: you define your world of capabilities, and then the LLM agent has to figure out when and how to use them, guided by your instructions and the tools’ docstrings.

# Running Agents

This section deals with how to run agents in different modes and configurations.

We already encountered the Runner which is the object that actually executes an agent given a user input (taking care of session, events, tool execution, etc.). But beyond that, ADK has some runtime configurations and options.

# Runtime Configuration

The Runtime Config likely refers to settings for running agents:

- For example, toggling streaming on or off for a run (we saw /run vs /run_sse).
- Setting a maximum chain length (to prevent infinite loops).
- Configuring concurrency (maybe how many runs in parallel).
- Logging and debugging options.
---
# ADK Configuration and Deployment

ADK might allow a global config or per-run config to adjust behavior without changing agent definitions. Possibly via RuntimeConfig class or passing arguments to Runner.run_async.

Some things possibly under runtime config:

- Token streaming: enabling/disabling token-level streaming output.
- Event Verbosity: whether to record intermediate steps or not.
- Callback toggles: maybe enabling/disabling certain callbacks for a run.

Since the docs list “Runtime Config” as a page, it likely outlines these adjustable parameters. When running via CLI (like adk run or adk api_server), you might specify some config (like turn on debug mode, etc.).

# Deploying Agents

ADK is not just for local development – it’s built to deploy on cloud infrastructure. The documentation has sections for:

- Agent Engine (Vertex AI) – A Google Cloud managed service specifically for deploying ADK agents.
- Cloud Run – Containerize the agent and run it serverlessly.
- GKE (Google Kubernetes Engine) – Deploy as part of a Kubernetes cluster.

Each deployment target has its own instructions.

# Agent Engine (Vertex AI)

Google’s Vertex AI has something called Agent Engine which likely can host ADK agents with minimal fuss (since ADK is a Google product). The steps likely include:

- Packaging your agent (maybe just your Python files and requirements).
- Uploading or registering it with Agent Engine.
- Agent Engine will handle scaling, monitoring, etc., for you.

The docs might explain how to use gcloud or the Vertex AI UI to deploy an ADK agent. Possibly a CLI command like:

adk deploy --engine vertex --project &lt;PROJECT&gt; --agent &lt;agent_name&gt; (not actual, just guessing format)

It’s touted as the easiest way to deploy ADK agents on Google Cloud.

# Cloud Run

To deploy to Cloud Run:

- You’d create a Docker container that runs adk api_server serving your agent.
- The docs likely provide a Dockerfile example and instructions to build and push to Cloud Run.
- Cloud Run gives you an HTTPS endpoint that your agent API will be served at, which can scale automatically.
---
# They likely emphasize:

- Use environment variables for any keys.
- Possibly how to handle state (Cloud Run instances ephemeral – maybe rely on external memory service if needed).
- Ensure you secure the endpoint (maybe with an API key or Cloud IAM).

# Google Kubernetes Engine (GKE)

- For full control:
- Deploy your agent as a microservice in a Kubernetes cluster.
- Similar to Cloud Run but you manage the cluster and pods.
- Docs might provide a Kubernetes YAML or helm chart snippet to deploy the containerized agent and expose it (with a LoadBalancer or ingress).
- GKE can be useful if you want to integrate with other services in a cluster or need custom networking.

# In all cases, after deployment, you’d interact with your agent via its API or UI:

- Agent Engine might provide a UI or integration with Vertex AI’s UI.
- Cloud Run/GKE you’d use the REST endpoints (the same ones used in local testing, e.g., /run, /sessions, etc.).

# Sessions & Memory

The documentation splits into:

- Session
- State
- Memory

# We have touched these:

- A Session is a single conversation or interaction context identified by (app, user, session_id). ADK’s SessionService manages them.
- State is the dictionary attached to a session for short-term memory within that conversation.
- Memory likely refers to a longer-term memory service that persists across sessions (for example, storing data per user that any new session can access).

# Session

The Session page likely details:

- Creating and retrieving sessions (via the API or via SessionService in code).
- Session metadata (like last update time, ID, etc.)
- How sessions end or expire (maybe sessions remain until you delete them explicitly, or you can configure a TTL).
- Best practices: e.g., use a stable user ID to allow Memory linking, etc.

It might also clarify that one agent can handle multiple sessions concurrently (like multi-user scenario) since each session keeps its own state and event history.

# State

The State page goes deeper into the session state dict:

- How to read/write it (we saw via ToolContext in a tool, or via callback_context in callbacks).
- What kind of data to store (simple JSON-serializable stuff ideally).
- Perhaps how state is stored under the hood: in memory by default, but if using a custom SessionService, it could store to a database.

They might mention not to put extremely large data in state (for that, use Artifacts).
---
# Memory

Memory likely refers to cross-session memory:

- ADK might have a MemoryService concept separate from SessionService.
- For example, an InMemoryMemoryService (which ironically might just be ephemeral) and possibly a VectorMemoryService or external memory.

Memory could be about things like embedding past conversations and retrieving them for context (like long-term memory embeddings) or simply storing key-value info per user beyond a single session.

ADK’s mention of Memory suggests you can implement:

from google.adk.memory import InMemoryMemoryService
memory_service = InMemoryMemoryService()
or similar, and attach it to an agent or runner. It might automatically fetch memory entries relevant to a query.

This section might also talk about how memory differs from state:

- State = short-term, specific to a conversation.
- Memory = long-term, across sessions (persistent user info).

They likely instruct on how to implement a custom MemoryService (like connecting to a database or vector store).

# Callbacks

Callbacks are a powerful feature in ADK for customizing agent behavior. We already used:

- before_model_callback
- before_tool_callback

There are others:

- after_model_callback: called right after the model returns but before tools or finalizing (e.g., you could post-process the model’s response or filter it).
- after_tool_callback: after a tool returns, before the agent sees the result – maybe to adjust the tool result or log it.
- before_agent_callback and after_agent_callback: these wrap the entire agent execution, useful for logging or setting up context.

The docs separate:

- Types of callbacks – enumerating the different callbacks ADK supports and their signatures (what parameters they get and when they fire).
- Callback patterns – common usage patterns, like implementing guardrails (as we did), logging transcripts to an external service, measuring latency, modifying prompts, etc.

One important point: Callbacks run your custom code synchronously in the agent’s loop. That means heavy processing in a callback could slow down the agent or even alter its behavior unexpectedly. So they likely recommend callbacks to be efficient or asynchronous if needed.
---
# Guardrail Patterns

We saw examples of both guardrail patterns:

- Input filtering with before_model.
- Output/tool filtering with before_tool.

Other patterns might include:

- Using after_model_callback to enforce style guidelines on the model’s output (you get the LLM’s draft, you can edit it).
- Using after_tool_callback to, say, format a tool’s raw result (e.g., pretty-print JSON or trim unnecessary data).
- before_agent_callback to initialize some context or ensure some condition, after_agent_callback to do cleanup or logging after an agent finishes a turn.

The ADK design through callbacks makes it possible to implement Observability (sending events to monitoring) and Intervention (safety checks) without modifying the core logic.

# Artifacts

Artifacts system is for handling non-text data. If an agent needs to generate or use binary data (images, audio, PDFs, etc.), you use Artifacts rather than stuffing binary in state or text.

From earlier:

- Artifacts are identified by a filename and have versions.
- The ArtifactService (like InMemoryArtifactService, GcsArtifactService) handles storing the data and retrieving it.
- Agents and tools can call methods like save_artifact(filename, data) and load_artifact(filename) which under the hood use the ArtifactService.
- The google.genai.types.Part object is used to encapsulate artifact data (with mime_type and bytes).

The artifacts docs likely cover:

- What are Artifacts? (we saw definitions: named binary blobs tied to sessions or users, with versioning).
- Why use Artifacts? (store large/binary data outside of state, keep conversation state lean, handle files, etc.).
- Core Concepts:

ADK provides:

- InMemoryArtifactService: keeps artifacts in memory (probably not persist beyond process, and limited size, but good for testing).
- GcsArtifactService: stores artifacts in Google Cloud Storage (persistent, shared among instances).
- Possibly others or you can implement BaseArtifactService for your own store (like saving to disk or database).

Events vs Artifacts: They might clarify difference: Events record the occurrence (like “user uploaded file X”), the file content itself would be stored as an artifact rather than in the event stream.

Using artifacts in practice:

- If a user sends an image, you’d save it via artifact service (the UI or API could support an upload endpoint that calls artifact service).
- The agent can then see a reference or handle to that artifact and maybe call a tool to process it (for example, an image analysis tool loads the artifact bytes).
- After processing, if the agent generates an output file (say a PDF report), it saves it as an artifact, and you can provide a link or means for the user to download it.
---
We saw code examples in the artifacts content: It showed how to create a Part with inline data and store it in an artifact service, and how to configure a Runner with an artifact service so that contexts can use artifact methods.

# Best Practices

Likely mention to clean up artifacts if not needed (since versions accumulate) and to consider security (don’t let agents arbitrarily read/write files outside allowed scope, but ADK likely isolates by app/user context).

# Events

Events represent the transcript and actions of the agent:

- User message event
- Model (assistant) message event
- Tool invocation event
- Tool result event
- Possibly other special events like function call, etc.

The Events page might detail the Event data model:

- Each event has an id, an author (like "user", "weather_agent", or sub-agent name, or "tool:name"), content (for message events) or actions (for function calls), timestamps, etc.

Understanding events is helpful for:

- Debugging (the Developer UI shows events in a timeline).
- Evaluation (comparing event sequences to expected sequences).
- If you want to log conversations, you can capture events.

ADK might allow customizing event storage (by default, events live in memory via SessionService). But one could imagine sending events to an external logging system via callbacks or custom SessionService.

The documentation might enumerate event types:

- UserMessageEvent
- AssistantMessageEvent
- ToolInvocationEvent
- ToolResultEvent
- ModelThinkingEvent (if they represent the hidden chain-of-thought), etc.

# Context

The Context likely refers to the CallbackContext and similar objects that give context of execution:

- For example, CallbackContext.agent to know which agent is running,
- CallbackContext.session to access session and state,
- etc.

Alternatively, “Context” might refer to the context that an agent has in terms of conversation (like events history and such). But since in nav it’s under Artifacts->Events->Context, likely they are detailing:

- The CallbackContext for callbacks.
- The ToolContext for tools (which we used as tool_context parameter to access state and artifact methods).

They explain how ToolContext is passed automatically if you include it as a param (like we did tool_context: ToolContext), giving you session state and artifact methods in tools.

They also likely show how to use callback_context.state vs tool_context.state (one is for callbacks, one for tools) – probably the same data but accessible in different places.
---
# Evaluate

ADK includes an evaluation framework. This helps measure agent performance by running it through test cases:

- A test case could be a conversation with a user and an expected response or outcome.
- ADK could run the agent in a simulated mode (possibly without external calls or with mock tools) and capture results.

The Evaluate page might guide:

- How to set up evaluation data (maybe in YAML or JSON, listing user messages and expected agent replies or actions).
- Running evaluation via CLI or code (like adk eval or using an Evaluator class).
- Perhaps built-in metrics or just simple success/fail comparisons.

It likely encourages writing scenarios that cover the agent’s desired behaviors and edge cases (like the ones we did manually in testing, but formalized).

# MCP

MCP could stand for “Multi-Call Protocol” or something similar – possibly an internal approach ADK uses to manage the chain-of-thought and tool calls.

It being in docs suggests advanced concept. Perhaps:

- MCP is the underlying mechanism where an LLM’s output is parsed for special tokens/format to call tools or delegate, akin to ReAct or JSON-based planning.
- It might define how an agent transitions between model and tools.

The docs might explain how ADK interprets LLM outputs: For example, the LLM might produce a content part like:

{"action": "tool", "name": "get_weather", "args": {"city": "London"}}
ADK sees that and calls the tool. That could be part of MCP (just speculation).

Alternatively, MCP could be “Managed Compute Plan” – not sure, but likely something along the lines of how ADK structures interactions.

This section might be for developers who want to deeply understand or customize the agent’s reasoning format. Possibly not needed for everyday usage unless you want to debug internal flow.

# Streaming

The Streaming page will cover:

- How ADK handles streaming of tokens from the model (the SSE mechanism).
- How to enable streaming in Runner.run_async by setting stream=True or via API using /run_sse with "streaming": true parameter (we saw mention that with /run_sse you can set streaming true to get token-level events).
- Limitations of streaming: e.g., not all models support it;
---
# Safety and Security

This section focuses on best practices and features to ensure agents are safe and secure:

- Use of callbacks (like we did with guardrails) to filter content (no toxic output, no personal data leakage).
- Possibly integration with content filtering APIs (like Perspective API or Vertex AI content filter) via a tool or callback.
- Ensuring credentials (API keys) are not exposed to the LLM (discussed in Authentication).
- Running code tools in a sandbox (for example, ADK’s code execution tool likely runs in an isolated environment with limits).
- Setting timeouts on tool execution to avoid hangs.
- Validating tool outputs if critical (e.g., if an agent can execute shell commands via a tool, impose restrictions).
- Monitoring and logging all interactions (so you have an audit trail of what the agent did – events log provides that).
- Possibly user authentication for agent usage (if deploying an agent API, ensure only authorized users access it).

Given ADK might be used to build enterprise apps, they emphasize incorporating safety from day one: like always have a before_model_callback to check for disallowed content, and an after_model_callback to sanitize any potentially unsafe final outputs, etc.

They might also mention compliance (like if using user data, abide by privacy laws, etc.) but that’s more on the user of ADK.

# Community Resources

This likely lists:

- GitHub repo for ADK (for raising issues or viewing source).
- Example projects or sample agents (the link "Sample agents" pointed to a GitHub repo with examples).
- Perhaps a Discord/Slack or forum where ADK developers discuss.
- Blogs or videos (there was a link to a YouTube "Introducing ADK" video in the home page).
- Any community-maintained tools or integrations.

Also possibly references to LangChain or other frameworks and how ADK can interoperate, which might be in Community or Third-party.

# Contributing Guide

If ADK is open-source or accepting contributions, this guide will tell developers how to contribute:

- Code style, testing.
- How to run the project locally.
- Where to ask for help.
- Possibly it’s more about contributing sample agents or documentation.

It might also include the CLA (Contributor License Agreement) if required by Google.
---
# API Reference

The API Reference is an exhaustive list of classes, methods, and functions in ADK. It’s auto-generated (likely from docstrings) and organizes by module:

- google.adk.agents (where Agent, BaseAgent, LlmAgent, WorkflowAgent etc. are).
- google.adk.artifacts (ArtifactService classes).
- google.adk.code_executors (classes for code execution tools, like BaseCodeExecutor, ContainerCodeExecutor, etc.).
- google.adk.evaluation (AgentEvaluator maybe).
- google.adk.events (Event classes, CallbackContext perhaps).
- google.adk.examples (maybe example provider classes for few-shot).
- google.adk.memory (MemoryService classes).
- google.adk.models (LlmRequest, LlmResponse, LiteLlm, BaseLlm, etc.).
- google.adk.planners (maybe for planning algorithms).
- google.adk.runners (Runner, and any config classes).
- google.adk.sessions (SessionService, Session classes).
- google.adk.tools (FunctionTool, built-in tool definitions).
- etc.

Each entry lists class attributes and methods. For example:

- In google.adk.agents module, you’d see Agent class and its parameters, BaseAgent with its fields (like name, description, before_agent_callback, etc.).
- The reference likely lists function signatures and docstrings.

Since including the entire API reference is huge, this document might not detail everything, but if needed offline, one could scroll through or search within it.

For completeness, at least note:

- Agent class has properties like name, description, and possibly methods like run_async() (inherited).
- BaseAgent is Pydantic model (so fields are defined as model fields as seen in JSON schema snippet).
- Tools might be classes or just functions, but e.g. FunctionTool likely is a class wrapping a function.
- Runner class likely has run() and run_async() methods.
- CallbackContext, ToolContext classes – showing what attributes they provide.

Given the sheer volume, one would rely on search within the reference in an offline setting to find details for a specific part of ADK.

This documentation compiled all pages of the ADK docs into a single reference. For more details on any section, refer to the official ADK documentation or the referenced lines above.

1 Agent Development Kit

9 Get Started - Agent Development Kit

10 Installation - Agent Development Kit
---
# Quickstart - Agent Development Kit

https://google.github.io/adk-docs/get-started/quickstart/

# Quickstart (streaming) - Agent Development Kit

https://google.github.io/adk-docs/get-started/quickstart-streaming/

# Testing - Agent Development Kit

https://google.github.io/adk-docs/get-started/testing/

# About ADK - Agent Development Kit

https://google.github.io/adk-docs/get-started/about/

# Agent Team - Agent Development Kit

https://google.github.io/adk-docs/tutorials/agent-team/

# LLM agents - Agent Development Kit

https://google.github.io/adk-docs/agents/llm-agents/

# Function tools - Agent Development Kit

https://google.github.io/adk-docs/tools/function-tools/

# Artifacts - Agent Development Kit

https://google.github.io/adk-docs/artifacts/

# Submodules - Agent Development Kit documentation

https://google.github.io/adk-docs/api-reference/google-adk.html